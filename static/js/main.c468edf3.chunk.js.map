{"version":3,"sources":["decoder/cryptoTypes.ts","decoder/cryptoUtilities.ts","decoder/caesar/CaesarResults.tsx","decoder/DecoderPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["codeLetters","getCaesarResultWithOffset","message","offset","adjustedAlphabet","slice","map","letter","codeLetter","rawValue","transform","indexOf","join","CaesarResults","resultStackId","getId","codedMessage","split","char","index","find","c","toUpperCase","position","toLowerCase","splitIntoCodeCharacters","Stack","Label","htmlFor","horizontal","tokens","childrenGap","_letter","DecoderPage","props","React","setMessage","style","paddingLeft","Item","horizontalAlign","TextField","label","value","onChange","_event","newMessage","width","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAAaA,EAAwB,CACnC,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,K,QCHWC,EAA4B,SACvCC,EACAC,GAEA,IAAMC,EAAgB,sBACjBJ,EAAYK,MAAMF,IADD,YAEjBH,EAAYK,MAAM,EAAGF,KAG1B,OAAOD,EACJI,KAAI,SAACC,GAAD,MAC0B,qBAAtBA,EAAOC,WACVD,EAAOE,SACPF,EAAOG,UACLN,EAAiBJ,EAAYW,QAAQJ,EAAOC,iBAGnDI,KAAK,K,QCLKC,EAtBO,SAAC,GAAwB,IAAtBX,EAAqB,EAArBA,QACjBY,EAAgBC,YAAM,eACtBC,EDV+B,SAACd,GACtC,OAAOA,EAAQe,MAAM,IAAIX,KAAI,SAACY,EAAMC,GAAP,MAAkB,CAC7CV,SAAUS,EACVV,WAAYR,EAAYoB,MAAK,SAACC,GAAD,OAAOA,IAAMH,EAAKI,iBAC/CC,SAAUJ,EACVT,UACEQ,EAAKI,gBAAkBJ,EACnB,SAACG,GAAD,OAAeA,EAAEC,eACjB,SAACD,GAAD,OAAeA,EAAEG,mBCEJC,CAAwBvB,GAC7C,OACE,eAACwB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOC,QAASd,EAAhB,mCACA,eAACY,EAAA,EAAD,CAAOG,YAAU,EAACC,OAAQ,CAAEC,YAAa,OAAzC,UACE,cAACL,EAAA,EAAD,CAAOI,OAAQ,CAAEC,YAAa,UAA9B,SACG/B,EAAYM,KAAI,SAAC0B,EAASb,GAAV,OACf,4CAAeA,EAAf,YAGJ,cAACO,EAAA,EAAD,CAAOI,OAAQ,CAAEC,YAAa,UAA9B,SACG/B,EAAYM,KAAI,SAAC0B,EAASb,GAAV,OACf,+BAAOlB,EAA0Be,EAAcG,iBCM5Cc,EA3BK,SAACC,GAAkB,IAAD,EACNC,WAAe,IADT,mBAC7BjC,EAD6B,KACpBkC,EADoB,KAQpC,OACE,eAACV,EAAA,EAAD,CAAOW,MAAO,CAAEC,YAAa,OAA7B,UACE,cAACZ,EAAA,EAAMa,KAAP,UACE,cAACb,EAAA,EAAD,CAAOG,YAAU,EAACW,gBAAgB,QAAlC,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,UACNC,MAAOzC,EACP0C,SAZkB,SAC1BC,EACAC,GAF0B,OAGvBV,EAAWU,GAAc,KAUpBT,MAAO,CAAEU,MAAO,WAItB,cAACrB,EAAA,EAAMa,KAAP,UACE,cAAC,EAAD,CAAerC,QAASA,UCfjB8C,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c468edf3.chunk.js","sourcesContent":["export const codeLetters: string[] = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n];\n\nexport type CodeLetter = typeof codeLetters[number];\n\nexport interface CodeCharacter {\n  rawValue: string;\n  codeLetter: CodeLetter | undefined;\n  position: number;\n  transform: (c: string) => string;\n}\n","import { CodeCharacter, codeLetters } from \"./cryptoTypes\";\n/**\n * Split a message string into an array of CodeCharacters\n * @param message\n */\nexport const splitIntoCodeCharacters = (message: string): CodeCharacter[] => {\n  return message.split(\"\").map((char, index) => ({\n    rawValue: char,\n    codeLetter: codeLetters.find((c) => c === char.toUpperCase()),\n    position: index,\n    transform:\n      char.toUpperCase() === char\n        ? (c: string) => c.toUpperCase()\n        : (c: string) => c.toLowerCase(),\n  }));\n};\n\n/**\n * Calculate the resulting string if `message` is encoded by a Caesar\n * cipher with offset `offset`\n * @param message Message to decode\n * @param offset Number of positions to shift the cipher\n */\nexport const getCaesarResultWithOffset = (\n  message: CodeCharacter[],\n  offset: number\n): string => {\n  const adjustedAlphabet = [\n    ...codeLetters.slice(offset),\n    ...codeLetters.slice(0, offset),\n  ];\n\n  return message\n    .map((letter) =>\n      typeof letter.codeLetter === \"undefined\"\n        ? letter.rawValue\n        : letter.transform(\n            adjustedAlphabet[codeLetters.indexOf(letter.codeLetter)]\n          )\n    )\n    .join(\"\");\n};\n","import { Label, Stack } from \"@fluentui/react\";\nimport * as React from \"react\";\nimport { codeLetters } from \"../cryptoTypes\";\nimport {\n  getCaesarResultWithOffset,\n  splitIntoCodeCharacters,\n} from \"../cryptoUtilities\";\nimport { getId } from \"@fluentui/react\";\n\ninterface Props {\n  message: string;\n}\n\nconst CaesarResults = ({ message }: Props) => {\n  const resultStackId = getId(\"resultStack\");\n  const codedMessage = splitIntoCodeCharacters(message);\n  return (\n    <Stack>\n      <Label htmlFor={resultStackId}>Caesar Cipher Results</Label>\n      <Stack horizontal tokens={{ childrenGap: \"1em\" }}>\n        <Stack tokens={{ childrenGap: \"0.25em\" }}>\n          {codeLetters.map((_letter, index) => (\n            <span>(Offset {index})</span>\n          ))}\n        </Stack>\n        <Stack tokens={{ childrenGap: \"0.25em\" }}>\n          {codeLetters.map((_letter, index) => (\n            <span>{getCaesarResultWithOffset(codedMessage, index)}</span>\n          ))}\n        </Stack>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default CaesarResults;\n","import * as React from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport CaesarResults from \"./caesar/CaesarResults\";\n\ninterface Props {}\n\nconst DecoderPage = (props: Props) => {\n  const [message, setMessage] = React.useState(\"\");\n\n  const handleMessageChange = (\n    _event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    newMessage?: string | undefined\n  ) => setMessage(newMessage || \"\");\n\n  return (\n    <Stack style={{ paddingLeft: \"1em\" }}>\n      <Stack.Item>\n        <Stack horizontal horizontalAlign=\"start\">\n          <TextField\n            label=\"Message\"\n            value={message}\n            onChange={handleMessageChange}\n            style={{ width: 400 }}\n          />\n        </Stack>\n      </Stack.Item>\n      <Stack.Item>\n        <CaesarResults message={message} />\n      </Stack.Item>\n    </Stack>\n  );\n};\n\nexport default DecoderPage;\n","import React from \"react\";\n\nimport DecoderPage from \"./decoder/DecoderPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DecoderPage />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}